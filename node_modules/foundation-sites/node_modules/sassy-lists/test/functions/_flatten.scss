@include test('The sl-flatten function') {
  $__TESTS__: (
    'Should flatten nested lists.': (
      ( 1 ( 2 3 4 5 6 ) 7, ): ( 1 2 3 4 5 6 7 ),
      ( 1 ( 2 ( 3 4 5 ) 6 ) 7, ): ( 1 2 3 4 5 6 7 ),
      ( 1 ( 2 ( 3 ( 4 5 ) ) 6 ) 7, ): ( 1 2 3 4 5 6 7 ),
      ( 'a' ('b' 'c' 'd' 'e' 'f') 'g', ): ( 'a' 'b' 'c' 'd' 'e' 'f' 'g' ),
      ( 'a' ('b' ('c' 'd' 'e') 'f') 'g', ): ( 'a' 'b' 'c' 'd' 'e' 'f' 'g' ),
      ( 'a' ('b' ('c' ('d' 'e')) 'f') 'g', ): ( 'a' 'b' 'c' 'd' 'e' 'f' 'g' ),
    ),
    'Should leave normal lists alone.': (
      ( 1, ): ( 1, ),
      ( 1 2 3 4 5 6 7, ): ( 1 2 3 4 5 6 7 ),
      ( 'a' 'b' 'c' 'd' 'e' 'f' 'g', ): ( 'a' 'b' 'c' 'd' 'e' 'f' 'g' ),
    ),
    'Should leave empty lists alone.': (
      ( (), ): ()
    )
  );

  @each $suite, $tests in $__TESTS__ {
    @each $arguments, $expect in $tests {
      @include assert-equal(sl-flatten($arguments...), $expect, $suite);
    }
  }
}
