// Assert
// ======



// Assert True
// -----------
/// Assert that a parameter is truey (anything not falsey)
/// @access public
/// @group testing
/// @param {*} $assert - Assert
/// @param {String} $description [''] - Assert description
@mixin assert-true(
  $assert,
  $description: null
) {
  $default: '"#{inspect($assert)}" should be truthy';
  $truey-assert: if(
    not not $assert and
    $assert != '' and
    $assert != (),
    true,
    false);
  @include _true-context('assert', $description or $default);
  @include _true-assert-results('assert-true', $truey-assert, true);
}



// Assert False
// ------------
/// Assert that a parameter is falsey (false, null, empty stirng or empty list)
/// @access public
/// @group testing
/// @param {*} $assert -
///   Assert
/// @param {String} $description [''] -
///   Assert description
@mixin assert-false(
  $assert,
  $description: null
) {
  $default: '"#{inspect($assert)}" should be falsey';
  $falsey-assert: if(
    not $assert or
    $assert == '' or
    $assert == (),
    true,
    false);
  @include _true-context('assert', $description or $default);
  @include _true-assert-results('assert-false', $falsey-assert, true);
}



// Assert Equal
// ------------
/// Assert that two parameters are `equal`
/// @access public
/// @group testing
/// @param {*} $assert -
///   Assert
/// @param {*} $expected -
///   Expected result
/// @param {String} $description [''] -
///   Assert description
@mixin assert-equal(
  $assert,
  $expected,
  $description: null
) {
  $default: '"#{inspect($assert)}" and "#{inspect($expected)}" should be equal';
  @include _true-context('assert', $description or $default);
  @include _true-assert-results('assert-equal', $assert, $expected);
}


// Assert UnEqual
// --------------
/// Assert that two parameters are `unequal`
/// @access public
/// @group testing
/// @param {*} $assert -
///   Assert
/// @param {*} $expected -
///   Expected result
/// @param {String} $description [''] -
///   Assert description
@mixin assert-unequal(
  $assert,
  $expected,
  $description: null
) {
  $default: '"#{inspect($assert)}" and "#{inspect($expected)}" should not be equal';
  @include _true-context('assert', $description or $default);
  @include _true-assert-results('assert-unequal', $assert, $expected, 'unequal');
}


// CSS Output Tests
// ----------------

/// Define a CSS-output assertion
/// @access public
/// @group testing
/// @param {String} $description -
///   Assert description
/// @content Use `output()` and `expect()` mixins
///   to define blocks for comparison
@mixin assert(
  $description: null
) {
  $default: _true-context('test') or 'CSS output should match expected output';
  @include _true-context('assert', $description or $default);
  @include _true-message('  ASSERT: #{$description}  ', 'comments');

  @content;

  @include _true-update-test('output-to-css');
  @include _true-update-stats-count('assertions');
  @include _true-context-pop();
  @include _true-message('  END_ASSERT  ', 'comments');
}



// Output
// ------
/// Describe the test content to be evaluated
/// The output will be compared against the results
/// of the `expect()` mixin.
/// @access public
/// @group testing
@mixin output(
  $selector: true
) {
  @include _true-message('  OUTPUT  ', 'comments');

  @if $selector {
    .test-output {
      @content;
    }
  } @else {
    @content;
  }

  @include _true-message('  END_OUTPUT  ', 'comments');
}


/// @alias output
@mixin input(
  $selector: true
) {
  @warn 'The `input` mixin has been renamed `output` and will be removed.';

  @include output($selector) {
    @content;
  }
}



// Expect
// ------
/// Describe the output content to be expected.
/// The output will be compared against the results
///  of the `output()` mixin.
/// @access public
/// @group testing
@mixin expect(
  $selector: true
) {
  @include _true-message('  EXPECTED  ', 'comments');

  @if $selector {
    .test-output {
      @content;
    }
  } @else {
    @content;
  }

  @include _true-message('  END_EXPECTED  ', 'comments');
}



// Assert Results
// --------------
/// @access private
@mixin _true-assert-results(
  $type,
  $assert,
  $expected,
  $unequal: false,
  $terminal: $true-terminal-output
) {
  $assertion: _true-context('assert');
  $equal: _true-is-equal($assert, $expected);
  $pass: if($unequal, not $equal, $equal);
  $result: if($pass, 'pass', 'fail');

  @if $result == 'pass' {
    @include _true-message('  ✔ #{$assertion}', 'comments');
  } @else {
    $module: _true-context('module');
    $test: _true-context('test');

    $title: 'FAILED [#{$type}]: #{$assertion}';
    $out: 'Output [#{type-of($assert)}]: #{inspect($assert)}';
    $exp: 'Expected [#{type-of($expected)}]: #{inspect($expected)}';

    @include _true-message('  ✖ #{$title}', 'comments');
    @include _true-message('    - #{$out}', 'comments');
    @include _true-message('    - #{$exp}', 'comments');

    @if $terminal {
      @include _true-message('#{$module} » #{$test}', 'debug');
      @include _true-message('- #{$out}', 'debug');
      @include _true-message('- #{$exp}', 'debug');
      @include _true-message($title, 'warn');
    }
  }

  @include _true-update-test($result);
  @include _true-update-stats-count('assertions');
  @include _true-context-pop();
}
